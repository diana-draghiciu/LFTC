%option noyywrap

%{ 
#include <stdio.h>	
#include <string.h>
#include "lang.tab.h" 
#include <math.h> 
int lines = 0;
%} 

DIGIT 		[0-9]
STRING		\"({LETTER}|{DIGIT})*\"
NUMBER		[+-]?[1-9][0-9]*|0
CONSTANT	{STRING}|{NUMBER}
LETTER		[a-zA-z]
IDENTIFIER 	{LETTER}({LETTER}|{DIGIT})*

%%

"main"	{printf( "Reserved word: %s\n", yytext); return MAIN;}
"if" 	{printf( "Reserved word: %s\n", yytext); return IF;}
"else" 	{printf( "Reserved word: %s\n", yytext); return ELSE;}
"while" {printf( "Reserved word: %s\n", yytext); return WHILE;}
"for" 	{printf( "Reserved word: %s\n", yytext); return FOR;}
"in"    {printf( "Reserved work: %s\n", yytext); return IN;}
"is" 	{printf( "Reserved word: %s\n", yytext); return IS;}
"isnot" {printf( "Reserved word: %s\n", yytext); return ISNOT;}
"islt" 	{printf( "Reserved word: %s\n", yytext); return ISLT;}
"islte" {printf( "Reserved word: %s\n", yytext); return ISLTE;}
"isgt" 	{printf( "Reserved word: %s\n", yytext); return ISGT;}
"isgte" {printf( "Reserved word: %s\n", yytext); return ISGTE;}
"read" 	{printf( "Reserved word: %s\n", yytext); return READ;}
"write" {printf( "Reserved word: %s\n", yytext); return WRITE;}
"int" 	{printf( "Reserved word: %s\n", yytext); return INT;}
"string" {printf( "Reserved word: %s\n", yytext); return STRING;}
"int[]" 	{printf( "Reserved word: %s\n", yytext); return INTARR;}
"string[]" {printf( "Reserved word: %s\n", yytext); return STRINGARR;}
"odd" {printf( "Reserved word: %s\n", yytext); return ODD;}
"even" {printf( "Reserved word: %s\n", yytext); return EVEN;}

{IDENTIFIER} {printf( "Identifier: %s\n", yytext);return IDENTIFIER;}
{CONSTANT} {printf( "Constant: %s\n", yytext);return CONSTANT;}

":"	{printf( "Separator: %s\n", yytext); return COLON;}
";"	{printf( "Separator: %s\n", yytext); return SEMI_COLON;}
"("	{printf( "Separator: %s\n", yytext); return OPEN_ROUND_BRACKET;}
")"	{printf( "Separator: %s\n", yytext); return CLOSED_ROUND_BRACKET;}
"["	{printf( "Separator: %s\n", yytext); return OPEN_RIGHT_BRACKET;}
"]"	{printf( "Separator: %s\n", yytext); return CLOSED_RIGHT_BRACKET;}
"{"	{printf( "Separator: %s\n", yytext); return OPEN_CURLY_BRACKET;}
"}"	{printf( "Separator: %s\n", yytext); return CLOSED_CURLY_BRACKET;}
"+"	{printf( "Operator: %s\n", yytext); return ADD;}
"-"	{printf( "Operator: %s\n", yytext); return SUB;}
"*"	{printf( "Operator: %s\n", yytext); return MUL;}
"/"	{printf( "Operator: %s\n", yytext); return DIV;}
"="	{printf( "Separator: %s\n", yytext); return ASSIGN;}

[ \t]+ {}
[\n]+ {lines++;}
		 
[+-]?0[0-9]*                    {printf("Illegal integer\n"); return -1;}
[0-9]+[a-zA-Z_]+[a-zA-Z0-9_]*   {printf("Illegal identifier\n"); return -1;}
.                               {printf("Lexical error\n"); return -1;}

%% 